//Python
Simulator -
8 register -->global ARRAYS of index 16

Assembler -
2 pass fashion 

1st pass -  Symbol Table


2nd pass - Final binary print
Opcode Table - Srishti
Note : everything should be in arrays
Every opcode value will return
input - query in the form of ( add, mov , sub etc.)
opcode = {
    "ins" : [type, opcode]
    "add" : [A, "00000"]
        
}
types {
   
    
    type A : [opcode, unused, r1, r2, r3]
    type A : [opcode, unused, r1, r2, r3]
}
register {
    r1 : "000"
    r2 : "
}
Functions - 

output - Opcode + optional(type, fields, values of unused bits)
Symbol Table - Diksha
In one pass make symbol Table
Return appropriate memory address
Labels {
    "label_name" : addr
}
Variables {

}
Functions - 
1) Error Check - if typo or label doesnt exist
2) var_return - returns variable memory address
3) 

Main File -  Tanishk
input system
symbol table cal
check if label
take in instruction 
segment instruction and call necessary values
pass it through error check --> tbd
output system

Error Table - 

//Tanishk Part 
instructions {
    add : "Instruction in the form of string"
    1 : "["var","x"]
    2 : "add a b c"

}


